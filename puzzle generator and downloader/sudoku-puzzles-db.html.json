<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <style>
    body {
      font-family: Arial, sans-serif;
      max-width: 600px;
      margin: 50px auto;
      padding: 20px;
      background: #f5f5f5;
    }
    .container {
      background: white;
      padding: 30px;
      border-radius: 10px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }
    h1 { color: #333; margin-top: 0; }
    button {
      background: #4CAF50;
      color: white;
      border: none;
      padding: 15px 30px;
      font-size: 16px;
      border-radius: 5px;
      cursor: pointer;
      width: 100%;
      margin: 10px 0;
    }
    button:hover { background: #45a049; }
    button:disabled { background: #ccc; cursor: not-allowed; }
    .status {
      margin: 15px 0;
      padding: 10px;
      border-radius: 5px;
      background: #e3f2fd;
      color: #1976d2;
    }
    .success { background: #c8e6c9; color: #2e7d32; }
    .progress { font-weight: bold; }
  </style>
</head>
<body>
  <div class="container">
    <h1>ðŸŽ® Sudoku Puzzle Generator</h1>
    <p>Generate a validated puzzle database with 150 puzzles (50 per difficulty).</p>
    
    <button id="generateBtn" onclick="generatePuzzles()">Generate Puzzles</button>
    <button id="downloadBtn" onclick="downloadFile()" disabled>Download puzzles.json</button>
    
    <div id="status"></div>
  </div>

  <script>
    let puzzleData = null;

    function isValid(g, r, c, n) {
      for (let x = 0; x < 9; x++) if (g[r][x] === n || g[x][c] === n) return false;
      const br = Math.floor(r/3)*3, bc = Math.floor(c/3)*3;
      for (let i = 0; i < 3; i++) for (let j = 0; j < 3; j++)
        if (g[br+i][bc+j] === n) return false;
      return true;
    }

    function solve(g) {
      for (let r = 0; r < 9; r++) for (let c = 0; c < 9; c++) {
        if (g[r][c] === 0) {
          for (let n = 1; n <= 9; n++) {
            if (isValid(g, r, c, n)) {
              g[r][c] = n;
              if (solve(g)) return true;
              g[r][c] = 0;
            }
          }
          return false;
        }
      }
      return true;
    }

    function genGrid() {
      const g = Array(9).fill().map(() => Array(9).fill(0));
      for (let b = 0; b < 9; b += 3) {
        const n = [1,2,3,4,5,6,7,8,9].sort(() => Math.random() - 0.5);
        let i = 0;
        for (let r = 0; r < 3; r++) for (let c = 0; c < 3; c++)
          g[b+r][b+c] = n[i++];
      }
      solve(g);
      return g;
    }

    function countSol(g) {
      let cnt = 0;
      function s(gr) {
        if (cnt > 1) return;
        for (let r = 0; r < 9; r++) for (let c = 0; c < 9; c++) {
          if (gr[r][c] === 0) {
            for (let n = 1; n <= 9; n++) {
              if (isValid(gr, r, c, n)) {
                gr[r][c] = n;
                s(gr);
                gr[r][c] = 0;
              }
            }
            return;
          }
        }
        cnt++;
      }
      s(g.map(r => [...r]));
      return cnt;
    }

    function genPuz(d) {
      const rem = {easy: 35, medium: 45, hard: 52}[d];
      const sol = genGrid();
      const puz = sol.map(r => [...r]);
      const cells = Array.from({length: 81}, (_, i) => 
        [Math.floor(i/9), i%9]).sort(() => Math.random() - 0.5);
      let r = 0;
      for (const [row,col] of cells) {
        if (r >= rem) break;
        const bk = puz[row][col];
        puz[row][col] = 0;
        if (countSol(puz) === 1) r++;
        else puz[row][col] = bk;
      }
      return {puzzle: puz, solution: sol};
    }

    function updateStatus(msg, isSuccess = false) {
      const status = document.getElementById('status');
      status.textContent = msg;
      status.className = isSuccess ? 'status success' : 'status';
    }

    async function generatePuzzles() {
      const btn = document.getElementById('generateBtn');
      btn.disabled = true;
      updateStatus('Generating puzzles... This takes about 30-60 seconds...');

      const db = {easy: [], medium: [], hard: []};
      
      for (const d of ['easy', 'medium', 'hard']) {
        updateStatus(`Generating ${d} puzzles...`);
        for (let i = 0; i < 50; i++) {
          db[d].push(genPuz(d));
          if ((i+1) % 10 === 0) {
            updateStatus(`${d}: ${i+1}/50 puzzles`);
            await new Promise(r => setTimeout(r, 0)); // Allow UI update
          }
        }
      }

      puzzleData = JSON.stringify(db);
      const size = (puzzleData.length / 1024).toFixed(1);
      
      updateStatus(`âœ… Generated 150 puzzles (${size} KB)! Click download below.`, true);
      document.getElementById('downloadBtn').disabled = false;
      btn.disabled = false;
    }

    function downloadFile() {
      if (!puzzleData) return;
      
      const blob = new Blob([puzzleData], { type: 'application/json' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = 'puzzles.json';
      a.click();
      URL.revokeObjectURL(url);
      
      updateStatus('âœ… Downloaded! Place puzzles.json in your project root.', true);
    }
  </script>
</body>
</html>